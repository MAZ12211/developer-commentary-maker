import flixel.FlxG;
import flixel.FlxSprite;
import flixel.util.FlxSave;
import flixel.text.FlxTextBorderStyle;
import flixel.math.FlxMath;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;

import funkin.audio.FunkinSound;

import funkin.ui.TextMenuList;
import funkin.ui.TextMenuItem;

import funkin.ui.MusicBeatSubState;

import flixel.text.FlxText;
import funkin.Assets;
import funkin.Paths;

import funkin.play.song.Song;
import funkin.data.song.SongRegistry;
import funkin.play.PlayState;
import funkin.modding.module.Module;
import flixel.util.FlxSave;
import funkin.util.assets.DataAssets;
import haxe.ds.StringMap;
import Std;
import Array;
import String;
import funkin.util.tools.StringTools;
import flixel.text.FlxTextBorderStyle;
import funkin.play.PauseSubState;
import funkin.modding.PolymodErrorHandler;
import haxe.Json;

class devInfoSubstate extends MusicBeatSubState
{
	var authors:FlxText; // Person(s) who wrote the commentary
	var infoText:FlxText; // Commentary text
	var game = PlayState.instance;
	var upArrow:FlxText;
	var downArrow:FlxText;

	/*
	* jsonPath will look for: data/songs/songID/dev-commentaries/difficulty-variation-devCom.json
	*/
	var jsonPath:String = Paths.json("songs/" + game.currentSong.id + "/dev-commentaries/" + game.currentChart.difficulty + (game.currentChart.variation != null ? "-" + game.currentChart.variation : "") + "-devCom");
	var jsonData; // Shortcut to Json.parse(Assets.getText(jsonPath))

	var authorsData:String; // Shortcut to Json.parse(Assets.getText(jsonPath)).authors
	var textData:String; // Shortcut to Json.parse(Assets.getText(jsonPath)).text
	var imagesData:Array; // Shortcut to Json.parse(Assets.getText(jsonPath)).images

	// Array for storing the images
	var imagesArray:Array<FlxSprite> = [];
	// Array for storing their descriptions
	/*
	There's probably a smarter way to do this with maps or something but I have no clue if hscript supports or not
	either way it's too much trouble to figure out (took a while to implement it)
	*/
	var imgDescs:Array<FlxText> = [];

	var defaultXpos = 20; // Default X position for hud placement
	var defaultYpos = 15; // Default Y position for hud placement
	var imgXPos;
	var imgYPos;

	var fadeInTimer = 1.8; // How long it takes for the text and images to fade in

	var allowInput_ = false; // Used to prevent inputs while the text is fading in (copied from source code)
	
	public function new() {
		super("devInfoSubstate", 3);
	}

	public override function create():Void {
		super.create();
		authors = new FlxText(defaultXpos, defaultYpos, FlxG.width - 20, null, null);
		authors.setFormat(Paths.font("vcr.ttf"), 18, 0xFFffffff, "left");
		authors.scrollFactor.set(0, 0);
		authors.wordWrap = false;
		authors.alpha = 0;
		add(authors);

		infoText = new FlxText(defaultXpos, defaultYpos + authors.height + 10, FlxG.width - 20, null, null);
		infoText.setFormat(Paths.font("vcr.ttf"), 24, 0xFFffffff, "left");
		infoText.scrollFactor.set(0, 0);
		infoText.wordWrap = false;
		infoText.alpha = 0;

		if (game != null && Assets.exists(jsonPath)) {
			jsonData = Json.parse(Assets.getText(jsonPath));

			authorsData = jsonData.authors;
			textData = jsonData.commentary;
			imagesData = jsonData.images;
			/*
			* I used `PolymodErrorHandler.showAlert()` as an alternative to calling `trace()`
			* because as far as I'm concerned (I've tested this several times), it's impossible to debug hscript scripts in 0.5.1
			* https://github.com/FunkinCrew/Funkin/issues/3497
			* Update (0.5.2): Still doesn't work.
			*/

			// Check for author data (defaulted to "unknown")
			if (authorsData != null) authors.text = "Written by " + authorsData;
			else authors.text = "Written by unknown";

			// Check for text data
			if (textData != null) {
				infoText.text = textData;
				add(infoText);
			} else {
				// Error message if there's no text
				PolymodErrorHandler.showAlert('Text Error', "No text data found in " + jsonPath);
			}

			// Check if your json file has images
			if (imagesData != null) {
				imgXPos = defaultXpos + 60; // 60px left padding so description text doesn't go out of bounds
				imgYPos = defaultYpos + infoText.height + 50;
				for (image in imagesData) {
					// Check for image path
					var imgPath = Paths.file("data/songs/" + game.currentSong.id + "/dev-commentaries/" + image.path + ".png");
					if (Assets.exists(imgPath)) {
						/*
						* If you didn't set an X and Y position for the image,
						* it will be at the bottom of the block of text (not recommended though because it's not reliable)
						*/
						var img = new FlxSprite(
							(image.x != null) ? image.x : imgXPos,
							(image.y != null) ? image.y : imgYPos
						);
						img.alpha = 0;
						img.loadGraphic(imgPath);
						img.scrollFactor.set(0, 0);
						imagesArray.push(img);
						add(img);
						// Vertical spacing between images (very janky way of doing it but it works)
						// It won't apply if you specify a Y position
						imgYPos = img.y + img.height * 1.4;

						// Checks if your json file has image descriptions
						if (image.desc != null) {
							var imgDesc = new FlxText(0, 0, FlxG.width - 20, null, null);
							imgDesc.setFormat(Paths.font("vcr.ttf"), 20, 0xFFffffff, "center");
							imgDesc.scrollFactor.set(0, 0);
							imgDesc.wordWrap = false;

							imgDesc.setPosition(
								img.x + (img.width - imgDesc.width) / 2, // Center text
								img.y + img.height + 10 // 10px up padding
							);
							imgDesc.text = image.desc; // will look for description text in an image
							imgDesc.alpha = 0;
							imgDescs.push(imgDesc);
							add(imgDesc);
						} else {
							// Error message if it can't find an image description
							// PolymodErrorHandler.showAlert('Image Description Error', "Couldn't find " + image.path + "'s " + "description text in " + jsonPath);
						}

					} else {
						// Error message if it can't find an image (wrong name or path)
						PolymodErrorHandler.showAlert('Image(s) not found', "Couldn't find " + image.path + " in " + Paths.file("songs/" + game.currentSong.id) + "\nDid you double check the names and the path?" + "\nImage format must be png.");
					}
				}

			} else {
				// Error message if there's no images in the json file
				// PolymodErrorHandler.showAlert('JSON file has no images', "No images data found in " + jsonPath + "\nIs this intentional?");
			}

		} else {
			// Error message if the JSON file isn't found in the proper path
			// It's kinda impossible to get this because of the detector script
			PolymodErrorHandler.showAlert('JSON file not found', "Couldn't find " + game.currentChart.difficulty + "-devCom" + ".json in " + jsonPath);
			super.close(); // Close the substate after viewing the error
		}
		// the arrows are created here due to layering issues
		upArrow = new FlxText(FlxG.width - 60, FlxG.height / 2 - 90, null, "↑");
		upArrow.setFormat(Paths.font("vcr.ttf"), 80, 0xFFffffff, "left");
		upArrow.scrollFactor.set(0, 0);
		upArrow.bold = true;
		upArrow.alpha = 0;
		add(upArrow);

		downArrow = new FlxText(FlxG.width - 60, FlxG.height / 2 - 30, null, "↓");
		downArrow.setFormat(Paths.font("vcr.ttf"), 80, 0xFFffffff, "left");
		downArrow.scrollFactor.set(0, 0);
		downArrow.bold = true;
		downArrow.alpha = 0;
		add(downArrow);

		function tweenIn(obj, ?delay:Float = 0) {
			FlxTween.tween(obj, {alpha: 1, y: obj.y + 5}, fadeInTimer, {ease: FlxEase.quartOut, startDelay: delay, onComplete: function(_) {
				allowInput_ = true;
			}});
		}
		// They're placed here just for organization
		tweenIn(upArrow, 0.5);
		tweenIn(downArrow, 0.5);
		tweenIn(authors);
		tweenIn(infoText);
		for (img in imagesArray) tweenIn(img);
		for (imgDesc in imgDescs) tweenIn(imgDesc);

	}

	public override function update(elapsed:Float):Void {
		super.update(elapsed);
		if (!allowInput_) return;
		var randomKeyboardSFX = Paths.sound("chartingSounds/keyboard" + FlxG.random.int(1, 3));

		if (controls.UI_UP && authors.y <= defaultYpos /*So you wouldn't be able to scroll past the top*/) {
			authors.y += 5 * 60 * elapsed; // No null check because it's added even if you forgot to have it in your json file (defaulted to "unknown" again)
			infoText.y += 5 * 60 * elapsed; // No null check because there's no point if there'll be an error message
			for (imgDesc in imgDescs) if (imgDesc != null) imgDesc.y += 5 * 60 * elapsed; // Null check here is necessary because you can have an image without alt description
			for (img in imagesArray) if (img != null) img.y += 5 * 60 * elapsed; // Same point
			upArrow.scale.set(0.9, 0.9);
			upArrow.color = 0xFFFFFF00;
		} else {
			upArrow.scale.set(1, 1);
			upArrow.color = 0xFFffffff;
		}

		// I don't like this implementation but I couldn't figure out how to do it like how a webpage handles it
		var canScrollDown:Bool;
		var lastImage = imagesArray[imagesArray.length - 1];

		if (lastImage != null && (lastImage.isOnScreen() || infoText.isOnScreen())) canScrollDown = true;
		else canScrollDown = false;

		if (controls.UI_DOWN && canScrollDown) {
			authors.y -= 5 * 60 * elapsed;
			infoText.y -= 5 * 60 * elapsed;
			for (imgDesc in imgDescs) if (imgDesc != null) imgDesc.y -= 5 * 60 * elapsed;
			for (img in imagesArray) if (img != null) img.y -= 5 * 60 * elapsed;
			downArrow.scale.set(0.9, 0.9);
			downArrow.color = 0xFFFFFF00;
		} else {
			downArrow.scale.set(1, 1);
			downArrow.color = 0xFFffffff;
		}

		if (controls.UI_DOWN_P || controls.UI_UP_P || controls.UI_UP_R || controls.UI_DOWN_R) {
			FunkinSound.playOnce(randomKeyboardSFX);
		}

		if (controls.BACK) {
			FunkinSound.playOnce(randomKeyboardSFX);
			super.close();
		}
	}

}